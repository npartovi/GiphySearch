{"version":3,"sources":["components/giphs/GiphsListItem.js","components/giphs/GiphsList.js","actions/giphyAPI.js","actions/types.js","components/search/SearchBar.js","components/layout/NavBar.js","reducers/actionsReducer.js","reducers/rootReducer.js","store.js","App.js","serviceWorker.js","index.js"],"names":["GiphsListItem","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","openModal","setState","modal","closeModal","favoriteAdded","gif","updateFavorites","state","_this2","source","title","url","trending_datetime","username","rating","originalImage","images","fixed_height","react_default","a","createElement","className","onClick","alt","src","style","display","id","rel","target","href","dist_default","format","aria-hidden","text","Component","GiphsList","updateFavoritesList","newState","toConsumableArray","favorites","push","localStorage","setItem","JSON","stringify","removeFavoritesList","filter","favorite","console","log","renderGiphs","searchTerm","renderTrendingGiphs","renderSearchTermGiphs","axios","get","concat","limit","offset","then","res","data","giphs","catch","err","error","trackScrolling","windowHeight","window","innerHeight","document","documentElement","offsetHeight","body","html","docHeight","Math","max","scrollHeight","clientHeight","pageYOffset","renderFavorites","parse","addEventListener","removeEventListener","nextProps","actions","renderSearch","term","_this3","_this$state","map","idx","giphs_GiphsListItem","key","connect","updateSearchTerm","dispatch","type","payload","SearchBar","onChange","e","value","onSubmit","preventDefault","placeholder","NavBar","renderTrending","renderTrendingGifs","renderFavoriteGifs","renderRandom","randomWord","randomWords","search_SearchBar","initialState","actionsReducer","arguments","length","undefined","action","objectSpread","combineReducers","middleware","thunk","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","apply","App","es","layout_NavBar","giphs_GiphsList","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cb3ecc68.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport Moment from \"react-moment\";\n\nclass GiphsListItem extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      modal: false\n    };\n  }\n\n  // Opens modal by changing component state\n  openModal = () => this.setState({ modal: true });\n\n  // Closes modal by changing component state\n  closeModal = () => this.setState({ modal: false });\n\n  // When user clicks on the add to favorite button, it will send this to the function in the GiphsList to be added\n  // to local storage. It will then close the modal\n  favoriteAdded = gif => {\n    this.props.updateFavorites(gif);\n    this.closeModal();\n  };\n\n  render() {\n    // Creating variables to be displayed in the modal\n    const { gif } = this.props;\n    const { modal } = this.state;\n    const source = gif.source || \"no source available\";\n    const title = gif.title || \"no title available\";\n    const url = gif.url || \"no url available\";\n    const trending_datetime =\n      gif.trending_datetime || \"no trending_datetime available\";\n    const username = gif.username || \"no username available\";\n    const rating = gif.rating || \"no rating available\";\n    const originalImage = gif.images.fixed_height.url;\n\n    return (\n      <div className=\"giphs-list-item\">\n        <img onClick={this.openModal} alt=\"oops\" src={originalImage} />\n        <div\n          className=\"modal\"\n          style={modal ? { display: \"block\" } : { display: \"none\" }}\n        >\n          <div className=\"modal-content\">\n            <div className=\"content-container\">\n              <div className=\"left-modal-container\">\n                <img src={originalImage} alt=\"\" />\n              </div>\n              <div className=\"right-modal-container\">\n                <div className=\"list-wrap\">\n                  <ul className=\"list\">\n                    <li>\n                      <h1>{title}</h1>\n                    </li>\n                    <li>\n                      <span>Submitted by:</span> {username}\n                    </li>\n                    <li>\n                      <span>Rating:</span> {rating}\n                    </li>\n                    <li>\n                      <span id=\"url-link\">URL: </span>\n                      <a rel=\"noopener noreferrer\" target=\"_blank\" href={url}>\n                        Visit on Giphy\n                      </a>\n                    </li>\n                    <li>\n                      <span id=\"source-link\">Original Location: </span>\n                      {source === \"no source available\" ? (\n                        \"No Source Available\"\n                      ) : (\n                        <a\n                          rel=\"noopener noreferrer\"\n                          target=\"_blank\"\n                          href={source}\n                        >\n                          Source\n                        </a>\n                      )}\n                    </li>\n                    <li>\n                      <span>Time of Trending:</span>{\" \"}\n                      <Moment format=\"MMM D YYYY HH:mm\">\n                        {trending_datetime}\n                      </Moment>\n                    </li>\n                  </ul>\n                </div>\n              </div>\n              <button className=\"close-modal-button\" onClick={this.closeModal}>\n                <i className=\"fa fa-times-circle\" aria-hidden=\"true\" />\n              </button>\n            </div>\n            <div className=\"buttons-container\">\n              <button\n                className=\"favorite-button\"\n                onClick={() => this.favoriteAdded(gif)}\n              >\n                {this.props.text}\n                <i className=\"fa fa-heart\" aria-hidden=\"true\" />\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default GiphsListItem;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport axios from \"axios\";\nimport GiphsListItem from \"./GiphsListItem\";\n\nclass GiphsList extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      giphs: [],\n      searchTerm: \"\",\n      offset: 0,\n      favorites: [],\n      renderFavorites: false\n    };\n  }\n\n  // Adds favorite to the browser local storage\n  updateFavoritesList = gif => {\n    let newState = [...this.state.favorites];\n    newState.push(gif);\n    this.setState({ favorites: newState });\n    localStorage.setItem(\"favorites\", JSON.stringify(newState));\n  };\n\n  // Removes favorite from the local storage\n  removeFavoritesList = gif => {\n    let newState = [...this.state.favorites];\n    newState = newState.filter(favorite => favorite !== gif);\n    this.setState({ favorites: newState });\n    console.log(this.state.favorites);\n    localStorage.setItem(\"favorites\", JSON.stringify(newState));\n  };\n\n  // Sets the State of the favorites array from local storage and adds a eventListener for scroll events\n  componentDidMount() {\n    if (localStorage.favorites) {\n      this.setState({ favorites: JSON.parse(localStorage.favorites) });\n    }\n    window.addEventListener(\"scroll\", this.trackScrolling);\n  }\n\n  // Removes the eventListener once the component unmounts to prevent side effects\n  componentWillUnmount() {\n    window.removeEventListener(\"scroll\", this.trackScrolling);\n  }\n\n  // Listens to the Redux Store to determine what gifs to render\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.actions.renderFavorites) {\n      this.setState({ renderFavorites: true });\n    } else {\n      this.setState({ renderFavorites: false });\n    }\n\n    if (nextProps.actions.renderSearch !== this.state.searchTerm) {\n      this.setState(\n        { searchTerm: nextProps.actions.renderSearch, offset: 0, giphs: [] },\n        () => {\n          this.renderGiphs();\n        }\n      );\n    }\n  }\n\n  // Initial Loading of the trending gifs before component mounts\n  componentWillMount() {\n    this.renderGiphs(this.state.term);\n  }\n\n  // Determines to render Trending giphs or Searched gifs(also includes the random word gifs)\n  renderGiphs = () => {\n    if (this.state.searchTerm === \"\") {\n      this.renderTrendingGiphs();\n    } else {\n      this.renderSearchTermGiphs();\n    }\n  };\n\n  // API call to the Giphy endpoint to retrieve the first 25 trending gifs. Also sets the offset in the component state so that\n  //user scrolls down the page, it will pull in the next 25 gifs\n\n  renderTrendingGiphs = () => {\n    axios\n      .get(\n        `https://api.giphy.com/v1/gifs/trending?api_key=7BsS1QpFETQKbZQLn7Uu18yMeTr9OGBq&limit=${\n          this.state.limit\n        }&offset=${this.state.offset}`\n      )\n      .then(res => {\n        let newState = res.data.data;\n        this.setState({\n          giphs: this.state.giphs.concat(newState),\n          offset: 25 + this.state.offset\n        });\n      })\n      .catch(err => {\n        console.error(err);\n      });\n  };\n\n  // API call to the Giphy endpoint to retrieve the first 25 gifs based on the search term. Also sets the offset in the component state so that\n  // user scrolls down the page, it will pull in the next 25 gifs\n  renderSearchTermGiphs = () => {\n    axios\n      .get(\n        `https://api.giphy.com/v1/gifs/search?api_key=7BsS1QpFETQKbZQLn7Uu18yMeTr9OGBq&q=${\n          this.state.searchTerm\n        }&limit=25&offset=${this.state.offset}`\n      )\n      .then(res => {\n        let newState = res.data.data;\n        this.setState({\n          giphs: this.state.giphs.concat(newState),\n          offset: 25 + this.state.offset\n        });\n      })\n      .catch(err => {\n        console.error(err);\n      });\n  };\n\n  // Used as a callback for the scroll eventListener. Determines where on the page the user is and once the user is\n  // further down the page, it will make another API call to get the next 25 gifs.\n  trackScrolling = () => {\n    const windowHeight =\n      \"innerHeight\" in window\n        ? window.innerHeight\n        : document.documentElement.offsetHeight;\n    const body = document.body;\n    const html = document.documentElement;\n    const docHeight = Math.max(\n      body.scrollHeight,\n      body.offsetHeight,\n      html.clientHeight,\n      html.scrollHeight,\n      html.offsetHeight\n    );\n    const windowBottom = windowHeight + window.pageYOffset;\n\n    if (windowBottom >= docHeight - 100) {\n      this.renderGiphs(this.state.searchTerm);\n    }\n  };\n\n  render() {\n    const { giphs, favorites, renderFavorites } = this.state;\n    let GiphsList;\n\n    if (renderFavorites) {\n      GiphsList = favorites.map((gif, idx) => (\n        <GiphsListItem\n          text={\"Remove Favorite\"}\n          updateFavorites={this.removeFavoritesList}\n          key={idx}\n          gif={gif}\n        />\n      ));\n    } else {\n      GiphsList = giphs.map((gif, idx) => (\n        <GiphsListItem\n          text={\"Add To Favorites\"}\n          updateFavorites={this.updateFavoritesList}\n          key={idx}\n          gif={gif}\n        />\n      ));\n    }\n\n    return (\n      <div className=\"giphs-list-container\">\n        <div className=\"giphs-list-wrapper\">{GiphsList}</div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  actions: state.actions\n});\n\nexport default connect(\n  mapStateToProps,\n  null\n)(GiphsList);\n","import {\n  UPDATE_SEARCH_TERM,\n  RENDER_TRENDING_GIPHS,\n  RENDER_FAVORITE_GIPHS\n} from \"./types\";\n\n// Updates the redux store with the passed in term to search Giphy Api with.\nexport const updateSearchTerm = term => dispatch => {\n  dispatch({\n    type: UPDATE_SEARCH_TERM,\n    payload: term\n  });\n};\n\n// Updates the redux store to set Trending gifs to true for rendering\nexport const renderTrendingGifs = () => dispatch => {\n  dispatch({\n    type: RENDER_TRENDING_GIPHS\n  });\n};\n\n// Updates the redux store to set Favorite gifs to true for rendering\nexport const renderFavoriteGifs = () => dispatch => {\n  dispatch({\n    type: RENDER_FAVORITE_GIPHS\n  });\n};\n","export const UPDATE_SEARCH_TERM = \"UPDATE_SEARCH_TERM\";\nexport const RENDER_TRENDING_GIPHS = \"RENDER_TRENDING_GIPHS\";\nexport const RENDER_FAVORITE_GIPHS = \"RENDER_FAVORITE_GIPHS\";\n","import React, { Component } from \"react\";\nimport { updateSearchTerm } from \"../../actions/giphyAPI\";\nimport { connect } from \"react-redux\";\n\nclass SearchBar extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      term: \"\"\n    };\n  }\n\n  // Sets the term to the state of the SearchBar component\n  onChange = e => {\n    this.setState({ term: e.target.value });\n  };\n\n  // Sends the term to the dispatch action so that it can be set in the redux store\n  onSubmit = e => {\n    e.preventDefault();\n    this.props.updateSearchTerm(this.state.term);\n  };\n\n  render() {\n    return (\n      <div className=\"search-bar-wrapper\">\n        <form onSubmit={this.onSubmit}>\n          <input\n            id=\"searchText\"\n            onChange={this.onChange}\n            type=\"search\"\n            placeholder=\"Search for a Giphy...\"\n          />\n          <span onClick={this.onSubmit} className=\"input-addon\">\n            <i className=\"fas fa-search fa-lg\" />\n          </span>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default connect(\n  null,\n  { updateSearchTerm }\n)(SearchBar);\n","import React, { Component } from \"react\";\nimport SearchBar from \"../search/SearchBar\";\nimport randomWords from \"random-words\";\nimport { connect } from \"react-redux\";\nimport {\n  renderTrendingGifs,\n  renderFavoriteGifs,\n  updateSearchTerm\n} from \"../../actions/giphyAPI\";\n\nclass NavBar extends Component {\n  // Sets off action to the redux store to render Trending gifs\n  renderTrending = e => {\n    e.preventDefault();\n    this.props.renderTrendingGifs();\n  };\n\n  // Sets off action to the redux store to render Favorite gifs\n  renderFavorites = e => {\n    e.preventDefault();\n    this.props.renderFavoriteGifs();\n  };\n\n  // Sets off action to the redux store to render Random Gifs\n  renderRandom = e => {\n    e.preventDefault();\n    let randomWord = randomWords();\n    this.props.updateSearchTerm(randomWord);\n  };\n\n  render() {\n    return (\n      <nav className=\"navbar-container\">\n        <div className=\"navbar-wrapper\">\n          <div className=\"title\">\n            <div className=\"title-word\">Giphy</div>\n            <div className=\"title-word\">Search</div>\n          </div>\n          <div className=\"search-bar-container\">\n            <SearchBar />\n          </div>\n          <div className=\"links-bar-container\">\n            <a href=\"/\" onClick={this.renderTrending} className=\"btn\">\n              <span>\n                Trending\n                <i className=\"fa fa-globe fa-lg\" aria-hidden=\"true\" />\n              </span>\n            </a>\n            <a href=\"/\" onClick={this.renderFavorites} className=\"btn\">\n              <span>\n                Favorites\n                <i className=\"fa fa-heart fa-lg\" aria-hidden=\"true\" />\n              </span>\n            </a>\n            <a href=\"/\" onClick={this.renderRandom} className=\"btn\">\n              <span>\n                Random\n                <i className=\"fas fa-random fa-lg\" />\n              </span>\n            </a>\n          </div>\n        </div>\n      </nav>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  actions: state.actions\n});\n\nexport default connect(\n  mapStateToProps,\n  { renderTrendingGifs, renderFavoriteGifs, updateSearchTerm }\n)(NavBar);\n","import {\n  UPDATE_SEARCH_TERM,\n  RENDER_TRENDING_GIPHS,\n  RENDER_FAVORITE_GIPHS\n} from \"../actions/types\";\n\nconst initialState = {\n  renderSearch: \"\",\n  renderFavorites: false\n};\n\n// Added a actionsReducer that chooses which gifs to load on the page\n\nconst actionsReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case UPDATE_SEARCH_TERM:\n      return {\n        ...state,\n        renderSearch: action.payload,\n        renderFavorites: false\n      };\n    case RENDER_TRENDING_GIPHS:\n      return {\n        ...state,\n        renderSearch: \"\",\n        renderFavorites: false\n      };\n    case RENDER_FAVORITE_GIPHS:\n      return {\n        ...state,\n        renderFavorites: true,\n        renderSearch: \"\"\n      };\n    default:\n      return state;\n  }\n};\n\nexport default actionsReducer;\n","import { combineReducers } from \"redux\";\nimport actionsReducer from \"./actionsReducer\";\n\nexport default combineReducers({\n  actions: actionsReducer\n});\n","import { createStore, applyMiddleware } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension/developmentOnly\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"./reducers/rootReducer\";\n\nconst initialState = {};\nconst middleware = [thunk];\n\nconst store = createStore(\n  rootReducer,\n  initialState,\n  composeWithDevTools(applyMiddleware(...middleware))\n);\n\nexport default store;\n","import React, { Component } from \"react\";\nimport GiphsList from \"./components/giphs/GiphsList\";\nimport Navbar from \"./components/layout/NavBar\";\nimport \"./App.css\";\nimport store from \"./store\";\nimport { Provider } from \"react-redux\";\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <div className=\"App\">\n          <div className=\"layout-container\">\n            <Navbar />\n            <GiphsList />\n          </div>\n        </div>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}